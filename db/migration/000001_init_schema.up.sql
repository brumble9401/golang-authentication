-- 1. Enable the UUID extension (PostgreSQL-specific)
-- This command is only needed in PostgreSQL. If you're using a different database system, you might need a different method to generate UUIDs.
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";  -- Enables UUID generation in PostgreSQL

-- 2. Create the roles table with UUID
CREATE TABLE roles (
    role_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),  -- UUID as primary key with default value generated by uuid_generate_v4()
    role_name VARCHAR(50) UNIQUE NOT NULL                 -- Unique name for the role (e.g., 'admin', 'staff', 'user')
);

-- 3. Create the permissions table with UUID
CREATE TABLE permissions (
    permission_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),  -- UUID as primary key with default value generated by uuid_generate_v4()
    permission_name VARCHAR(100) UNIQUE NOT NULL                 -- Unique name for each permission (e.g., 'view_users', 'create_users')
);

-- 4. Create the users table with UUID for role_id
CREATE TABLE users (
    user_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),   -- UUID as primary key for users
    username VARCHAR(50) UNIQUE NOT NULL,                    -- Unique username for each user
    password_hash VARCHAR(255) NOT NULL,                     -- Hashed password for secure storage
    email VARCHAR(100) UNIQUE NOT NULL,                      -- Unique email for each user
    full_name VARCHAR(100),                                  -- Full name of the user
    role_id UUID,                                            -- Role UUID linking to the 'roles' table
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,          -- Timestamp when the user is created
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,          -- Timestamp when the user details are updated
    FOREIGN KEY (role_id) REFERENCES roles(role_id)          -- Foreign key reference to the roles table
);

-- 5. Insert initial roles with UUIDs into the roles table
INSERT INTO roles (role_name) VALUES
('admin'),
('staff'),
('user');
